/* 
Creates all  DB tables for the bookstore 
GENERATED BY DEFAULT AS IDENTITY -> constraint that creates an auto-increment key
    Note, if you insert into an auto-increment key, then the next default value will be bad, see the end of populate.sql to how to get around this (by resetting it)
All the tables and it's columns are presented in the Schema diagram.
*/


-- Creates the table for a warehouse
CREATE TABLE IF NOT EXISTS warehouse
(
    warehouse_ID INT PRIMARY KEY,
    warehouse_address VARCHAR(60) NOT NULL
);

-- Creates the table for an author
CREATE TABLE IF NOT EXISTS author
(
  author_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  author_name VARCHAR(40)
);

-- Creates the publisher table
CREATE TABLE IF NOT EXISTS publisher
(
    publisher_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    publisher_name VARCHAR(100) NOT NULL,
    publisher_address VARCHAR(60) NOT NULL,
    publisher_email VARCHAR(100) NOT NULL,
    publisher_bank_number VARCHAR(20) NOT NULL
);

-- Creates the multi-valued attribute table for publishers and phone numbers
CREATE TABLE IF NOT EXISTS inst_phone
(
    publisher_ID INT NOT NULL,
    phone_number VARCHAR(20),
    FOREIGN KEY (publisher_ID) REFERENCES publisher(publisher_ID),
	PRIMARY KEY (publisher_ID, phone_number)
);

-- Creates the cart table
CREATE TABLE IF NOT EXISTS cart
(
    cart_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
);

-- Creates the users table
CREATE TABLE IF NOT EXISTS users
(
    user_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cart_ID INT,
    username VARCHAR(20) NOT NULL,
    password VARCHAR(20) NOT NULL,
    user_name VARCHAR(20) NOT NULL,
    user_email VARCHAR(100) NOT NULL,
    user_address VARCHAR(60) NOT NULL,
    is_owner boolean NOT NULL,
    FOREIGN KEY (cart_ID) REFERENCES cart (cart_ID)
);

-- Creates the shipping table
CREATE TABLE IF NOT EXISTS shipping
(
    shipping_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    company_name VARCHAR(30) NOT NULL,
    status VARCHAR(20) NOT NULL,
    warehouse_ID INT NOT NULL,
    FOREIGN KEY (warehouse_ID) REFERENCES warehouse (warehouse_ID)
);

-- Creates the orders table
CREATE TABLE IF NOT EXISTS orders
(
    order_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_date DATE NOT NULL DEFAULT CURRENT_DATE,
    order_address VARCHAR(60) NOT NULL,
    order_bank_number VARCHAR(20) NOT NULL,
    shipping_ID INT NOT NULL,
    user_ID INT NOT NULL,
    cart_ID INT NOT NULL,
    FOREIGN KEY (shipping_ID) REFERENCES shipping (shipping_ID),
    FOREIGN KEY (user_ID) REFERENCES users (user_ID),
    FOREIGN KEY (cart_ID) REFERENCES cart (cart_ID)
);

-- Creates the book table
CREATE TABLE IF NOT EXISTS book
(
    ISBN VARCHAR(13) PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    year INT NOT NULL,
    genre VARCHAR(50) NOT NULL,
    page_count INT NOT NULL,
    price REAL NOT NULL,
    commission REAL NOT NULL,
    url VARCHAR(300) NOT NULL,
    quantity INT NOT NULL,
    warehouse_ID INT,
    publisher_ID INT,
    is_purchasable BOOLEAN,
    FOREIGN KEY (warehouse_ID) REFERENCES warehouse (warehouse_ID)
		ON DELETE CASCADE,
    FOREIGN KEY (publisher_ID) REFERENCES publisher (publisher_ID)
		ON DELETE CASCADE
);

-- Creates the relational table contains between book and cart
CREATE TABLE IF NOT EXISTS contains
(
    ISBN VARCHAR(13) NOT NULL,
    cart_ID INT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (ISBN) REFERENCES book(ISBN),
    FOREIGN KEY (cart_ID) REFERENCES cart(cart_ID),
	  PRIMARY KEY (ISBN, cart_ID)
);

-- Creates the relational table written_by between author and book
CREATE TABLE IF NOT EXISTS written_by
(
  ISBN VARCHAR(13),
  author_ID INT,
  FOREIGN KEY(ISBN) REFERENCES book(ISBN),
  FOREIGN KEY (author_ID) REFERENCES author(author_ID),
  PRIMARY KEY (ISBN, author_ID)
);
